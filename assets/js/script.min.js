document.addEventListener('DOMContentLoaded', () => {
const mobileMenuButton = document.getElementById('mobile-menu-button');
const mobileMenu = document.getElementById('mobile-menu');
if (mobileMenuButton && mobileMenu) {
mobileMenuButton.addEventListener('click', () => {
mobileMenu.classList.toggle('hidden');
});
}
document.querySelectorAll('a[data-scroll-to]').forEach(anchor => {
anchor.addEventListener('click', function (e) {
e.preventDefault();
const targetId = this.getAttribute('data-scroll-to');
const targetElement = document.getElementById(targetId);
if (targetElement) {
const headerOffset = document.querySelector('.site-header')?.offsetHeight || 0;
const elementPosition = targetElement.getBoundingClientRect().top;
const offsetPosition = elementPosition + window.pageYOffset - headerOffset;
window.scrollTo({
top: offsetPosition,
behavior: 'smooth'
});
if (mobileMenu && !mobileMenu.classList.contains('hidden')) {
mobileMenu.classList.add('hidden');
}
}
});
});
const gniPlaylist = document.getElementById('gni-playlist');
const gniVideoPlayer = document.getElementById('gni-video-player');
if (gniPlaylist && gniVideoPlayer) {
gniPlaylist.addEventListener('click', (e) => {
const button = e.target.closest('button');
if (button && button.dataset.videoId) {
gniVideoPlayer.src = `https://www.youtube.com/embed/${button.dataset.videoId}`;
gniPlaylist.querySelector('.active')?.classList.remove('active');
button.parentElement.classList.add('active');
}
});
}
const serviceTabsContainer = document.querySelector('.service-tabs');
if (serviceTabsContainer) {
serviceTabsContainer.addEventListener('click', (e) => {
const tabButton = e.target.closest('.service-tab');
if (tabButton && !tabButton.classList.contains('active')) {
const tabId = tabButton.dataset.tab;
serviceTabsContainer.querySelector('.active')?.classList.remove('active');
const currentPane = document.querySelector('.service-pane.active');
if(currentPane) currentPane.classList.remove('active');
tabButton.classList.add('active');
const newPane = document.getElementById(`tab-${tabId}`);
if(newPane) newPane.classList.add('active');
}
});
}
const timelineGraph = document.querySelector('.timeline-graph');
const tooltip = document.getElementById('tooltip');
let activeHitbox = null; 
if (timelineGraph && tooltip) {
const showTooltip = (hitbox) => {
const point = hitbox.nextElementSibling; 
if (!point) return;
const year = point.getAttribute('data-year');
const text = point.getAttribute('data-text');
tooltip.innerHTML = `<strong>${year}</strong><p>${text}</p>`;
tooltip.style.display = 'block';
const tooltipRect = tooltip.getBoundingClientRect();
const graphRect = timelineGraph.getBoundingClientRect();
const pointRect = point.getBoundingClientRect();
const x = (pointRect.left + pointRect.right) / 2 - graphRect.left;
let left = x - (tooltipRect.width / 2);
if (left < 0) left = 5;
if (left + tooltipRect.width > graphRect.width) {
left = graphRect.width - tooltipRect.width - 5;
}
tooltip.style.left = `${left}px`;
if (activeHitbox && activeHitbox !== hitbox) {
activeHitbox.nextElementSibling.style.fill = '#fff';
}
point.style.fill = '#2563eb';
activeHitbox = hitbox;
};
const hideTooltip = () => {
if (activeHitbox) {
tooltip.style.display = 'none';
activeHitbox.nextElementSibling.style.fill = '#fff'; 
activeHitbox = null;
}
};
timelineGraph.querySelectorAll('.point-hitbox').forEach(hitbox => {
hitbox.addEventListener('click', (e) => {
e.stopPropagation();
if (hitbox === activeHitbox) {
hideTooltip();
} else {
showTooltip(hitbox);
}
});
});
document.addEventListener('click', (e) => {
if (activeHitbox && !activeHitbox.contains(e.target) && !tooltip.contains(e.target)) {
hideTooltip();
}
});
}
const modalOverlay = document.getElementById('partnerInfoModal');
const modalTitle = document.getElementById('modalTitle');
const modalDescription = document.getElementById('modalDescription');
const modalLink = document.getElementById('modalLink');
const closeModalBtn = document.getElementById('modalCloseBtn');
const openModal = (link) => {
if (!modalOverlay) return;
modalTitle.textContent = link.dataset.title || '';
modalDescription.textContent = link.dataset.description || '';
modalLink.href = link.href || '#';
modalOverlay.style.display = 'flex';
};
const closeModal = () => {
if (!modalOverlay) return;
modalOverlay.style.display = 'none';
};
if (modalOverlay) {
closeModalBtn.addEventListener('click', closeModal);
modalOverlay.addEventListener('click', (e) => {
if (e.target === modalOverlay) {
closeModal();
}
});
}
const handleDeviceSpecificRedirect = (link) => {
const userAgent = navigator.userAgent || navigator.vendor || window.opera;
let targetUrl = link.dataset.pcUrl || '#';
if (/android/i.test(userAgent)) {
targetUrl = link.dataset.aosUrl || link.dataset.pcUrl || '#';
} else if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {
targetUrl = link.dataset.iosUrl || link.dataset.pcUrl || '#';
}
if (targetUrl && targetUrl !== '#') {
window.open(targetUrl, '_blank', 'noopener,noreferrer');
}
};
document.body.addEventListener('click', (e) => {
const link = e.target.closest('a');
if (!link) return;
if (link.closest('.logo-swiper') && link.classList.contains('partner-logo-link')) {
if (link.dataset.title && link.dataset.description) {
e.preventDefault();
openModal(link);
return; 
}
}
if (link.classList.contains('service-partner-link') && link.dataset.pcUrl) {
e.preventDefault();
handleDeviceSpecificRedirect(link);
return; 
}
});
const forwardConfig = {
loop: true,
freeMode: true,
slidesPerView: 'auto',
spaceBetween: 15,
autoplay: {
delay: 0,
disableOnInteraction: false,
pauseOnMouseEnter: true,
},
speed: 4000,
};
new Swiper('.logo-swiper', forwardConfig);
const partnerSwipers = document.querySelectorAll('.logo-wall-swiper .swiper-wrapper');
partnerSwipers.forEach(swiper => {
swiper.addEventListener('mouseenter', () => {
swiper.style.animationPlayState = 'paused';
});
swiper.addEventListener('mouseleave', () => {
swiper.style.animationPlayState = 'running';
});
});
const contactSection = document.getElementById('contact');
const floatingBtn = document.getElementById('floating-contact-btn');
if (contactSection && floatingBtn) {
const observer = new IntersectionObserver((entries) => {
entries.forEach(entry => {
if (entry.isIntersecting) {
floatingBtn.classList.add('hidden');
} else {
floatingBtn.classList.remove('hidden');
}
});
}, {
root: null, 
threshold: 0.1 
});
observer.observe(contactSection);
}
});